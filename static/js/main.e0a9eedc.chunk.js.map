{"version":3,"sources":["components/header.js","components/navbar.js","components/container.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Navbar","_ref","score","statusText","highScore","Container","cards","onClick","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","map","card","key","id","data-id","brand","Footer","App","state","counter","clicked","handleCardClick","event","prevCards","_this","slice","find","element","parseInt","target","parentElement","getAttribute","forEach","index","console","log","setState","splice","findIndex","error","components_navbar","this","components_header","components_container","components_footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e0a9eedc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/header.css\";\r\n\r\nconst Header = () => (\r\n  <header className=\"header\">\r\n    <h1>Clicky Game!</h1>\r\n    <h2>\r\n      Click on an image to earn points, but don't click on any more than once!\r\n    </h2>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"../css/navbar.css\";\r\n\r\nconst Navbar = ({ score, statusText, highScore }) => {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <ul>\r\n        <li className=\"brand\">Clicky Game</li>\r\n        <li className=\"status-text\">{statusText}</li>\r\n        <li className=\"score\">\r\n          Score: {score} | High Score: {highScore}\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"../css/container.css\";\r\n\r\nfunction shuffle(array) {\r\n  var currentIndex = array.length,\r\n    temporaryValue,\r\n    randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nconst Container = ({ cards, onClick }) => {\r\n  cards = shuffle(cards);\r\n\r\n  return (\r\n    <main className=\"container\">\r\n      {cards.map(card => (\r\n        <div key={card.id} data-id={card.id} onClick={onClick}>\r\n          <i className={card.brand} />\r\n        </div>\r\n      ))}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"../css/footer.css\";\r\n\r\nconst Footer = () => (\r\n  <footer className=\"footer\">\r\n    <div className=\"bottom\">\"Clickly Game!\"</div>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nimport Header from \"./components/header\";\nimport Navbar from \"./components/navbar\";\nimport Container from \"./components/container\";\nimport Footer from \"./components/footer\";\n\nclass App extends Component {\n  state = {\n    counter: 0,\n    highScore: 0,\n    statusText: \"Click an image to begin!\",\n    cards: [\n      {\n        id: 1,\n        brand: \"fab fa-cc-paypal fa-10x\",\n        clicked: false\n      },\n      {\n        id: 2,\n        brand: \"fab fa-android fa-10x\",\n        clicked: false\n      },\n      {\n        id: 3,\n        brand: \"fab fa-amazon-pay fa-10x\",\n        clicked: false\n      },\n      {\n        id: 4,\n        brand: \"fab fa-apple-pay fa-10x\",\n        clicked: false\n      },\n      {\n        id: 5,\n        brand: \"fab fa-cc-stripe fa-10x\",\n        clicked: false\n      },\n      {\n        id: 6,\n        brand: \"fab fa-google fa-10x\",\n        clicked: false\n      },\n      {\n        id: 7,\n        brand: \"fab fa-js fa-10x\",\n        clicked: false\n      },\n      {\n        id: 8,\n        brand: \"fab fa-linkedin fa-10x\",\n        clicked: false\n      },\n      {\n        id: 9,\n        brand: \"fab fa-linkedin-in fa-10x\",\n        clicked: false\n      },\n      {\n        id: 10,\n        brand: \"fab fa-github fa-10x\",\n        clicked: false\n      },\n      {\n        id: 11,\n        brand: \"fab fa-npm fa-10x\",\n        clicked: false\n      },\n      {\n        id: 12,\n        brand: \"fab fa-node fa-10x\",\n        clicked: false\n      }\n    ]\n  };\n\n  handleCardClick = event => {\n    // Create a copy of the state.cards array as we don't want to modify state directly\n    const prevCards = this.state.cards.slice();\n\n    // Find the card in the array that matches the calling target.\n    const card = prevCards.find(\n      element =>\n        element.id ===\n        parseInt(event.target.parentElement.getAttribute(\"data-id\"))\n    );\n\n    try {\n      // If the card has been clicked previously:\n      if (card.clicked) {\n        prevCards.forEach((element, index) => {\n          prevCards[index].clicked = false;\n        });\n        console.log(prevCards);\n        // Reset the counter and cards array to the initial state\n        this.setState({\n          counter: 0,\n          statusText: \"You guessed incorrectly!\",\n          cards: prevCards\n        });\n      } else {\n        // Update the card's clicked value to true.\n        card.clicked = true;\n\n        // Remove matching card from the array and add the updated card\n        prevCards.splice(\n          prevCards.findIndex(element => element.id === card.id),\n          1,\n          card\n        );\n\n        // Otherwise update the cards and increment the counter and highscore if necessary\n        if (this.state.counter >= this.state.highScore) {\n          this.setState({\n            counter: this.state.counter + 1,\n            statusText: \"You guessed correctly!\",\n            highScore: this.state.counter + 1,\n            cards: prevCards\n          });\n        } else {\n          this.setState({\n            counter: this.state.counter + 1,\n            statusText: \"You guessed correctly!\",\n            cards: prevCards\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          score={this.state.counter}\n          statusText={this.state.statusText}\n          highScore={this.state.highScore}\n        />\n        <Header />\n        <div className=\"container\">\n          <Container cards={this.state.cards} onClick={this.handleCardClick} />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}